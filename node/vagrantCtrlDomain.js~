/*
* Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*
*/
/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4,
maxerr: 50, node: true */
/*global */
(function () {
	"use strict";


	var util  = require('util'),
    spawn = require('child_process').spawn;
    
	function nodeVagrantUp(path, cb) {
		var output = "";

		var cmd = spawn('vagrant', ['up'], {cwd : path});

		cmd.stdout.on('data', function (data) {
		  console.log('stdout: ' + data);
		  output += data;
		});

		cmd.stderr.on('data', function (data) {
		  console.log('stderr: ' + data);
		  output += data;	
		});

		cmd.on('close', function (code) {
		  console.log('child process exited with code ' + code);
	      cb(undefined, output);
		});
		
	}

	function nodeVagrantSuspend(path, cb) {

		var output = "";

		var cmd2 = spawn('vagrant', ['suspend'], {cwd : path});

		cmd2.stdout.on('data', function (data) {
		  console.log('stdout: ' + data);
		  output += data;
		});

		cmd2.stderr.on('data', function (data) {
		  console.log('stderr: ' + data);
		  output += data;	
		});

		cmd2.on('close', function (code) {
		  console.log('child process exited with code ' + code);
	      cb(undefined, output);
		});

	}

	function nodeVagrantHalt(path, cb) {

		var output = "";

		var cmd2 = spawn('vagrant', ['halt'], {cwd : path});

		cmd2.stdout.on('data', function (data) {
		  console.log('stdout: ' + data);
		  output += data;
		});

		cmd2.stderr.on('data', function (data) {
		  console.log('stderr: ' + data);
		  output += data;	
		});

		cmd2.on('close', function (code) {
		  console.log('child process exited with code ' + code);
	      cb(undefined, output);
		});

	}
	
	function init(domainManager) {
		if (!domainManager.hasDomain("vagrantCtrl")) {
			domainManager.registerDomain("vagrantCtrl", {major: 0, minor: 1});
		}

		domainManager.registerCommand(
			"vagrantCtrl", // domain name
			"nodeVagrantUp", // command name
			nodeVagrantUp, // command handler function
			true, 
			"Vagrant up"
		);
		
		domainManager.registerCommand(
			"vagrantCtrl", // domain name
			"nodeVagrantSuspend", // command name
			nodeVagrantSuspend, // command handler function
			true, 
			"Vagrant suspend"
		);

		domainManager.registerCommand(
			"vagrantCtrl", // domain name
			"nodeVagrantHalt", // command name
			nodeVagrantHalt, // command handler function
			true, 
			"Vagrant halt"
		);
	}
	exports.init = init;
}());
